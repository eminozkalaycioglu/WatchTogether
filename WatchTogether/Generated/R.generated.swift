//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 15 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `ButtonBlueColor`.
    static let buttonBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBlueColor")
    /// Color `CardBackgroundColor`.
    static let cardBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CardBackgroundColor")
    /// Color `MainBlueColorDark`.
    static let mainBlueColorDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBlueColorDark")
    /// Color `MainBlueColorLight`.
    static let mainBlueColorLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBlueColorLight")
    /// Color `MoreUserBackgroundColor`.
    static let moreUserBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MoreUserBackgroundColor")
    /// Color `RegisterGreenColor`.
    static let registerGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RegisterGreenColor")
    /// Color `TabBarTintColor`.
    static let tabBarTintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TabBarTintColor")
    /// Color `TextFieldBorderColor`.
    static let textFieldBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBorderColor")
    /// Color `TextFieldTextColor`.
    static let textFieldTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldTextColor")
    /// Color `UserCountGreen`.
    static let userCountGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "UserCountGreen")
    /// Color `UserCountOrange`.
    static let userCountOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "UserCountOrange")
    /// Color `UserCountRed`.
    static let userCountRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "UserCountRed")
    /// Color `UserCountTurquoise`.
    static let userCountTurquoise = Rswift.ColorResource(bundle: R.hostingBundle, name: "UserCountTurquoise")
    /// Color `WhiteAlpha0,75`.
    static let whiteAlpha075 = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteAlpha0,75")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CardBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBlueColorDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlueColorDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlueColorDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBlueColorLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlueColorLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlueColorLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MoreUserBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func moreUserBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.moreUserBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RegisterGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func registerGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.registerGreenColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TabBarTintColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabBarTintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabBarTintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UserCountGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func userCountGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.userCountGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UserCountOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func userCountOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.userCountOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UserCountRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func userCountRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.userCountRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "UserCountTurquoise", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func userCountTurquoise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.userCountTurquoise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteAlpha0,75", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteAlpha075(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteAlpha075, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBlueColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBlueColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBlueColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CardBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cardBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cardBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainBlueColorDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBlueColorDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBlueColorDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainBlueColorLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBlueColorLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBlueColorLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MoreUserBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func moreUserBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.moreUserBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RegisterGreenColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func registerGreenColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.registerGreenColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TabBarTintColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tabBarTintColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tabBarTintColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBorderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBorderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "UserCountGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func userCountGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.userCountGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "UserCountOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func userCountOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.userCountOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "UserCountRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func userCountRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.userCountRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "UserCountTurquoise", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func userCountTurquoise(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.userCountTurquoise.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WhiteAlpha0,75", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteAlpha075(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteAlpha075.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Kanit-BlackItalic`.
    static let kanitBlackItalic = Rswift.FontResource(fontName: "Kanit-BlackItalic")
    /// Font `Kanit-Black`.
    static let kanitBlack = Rswift.FontResource(fontName: "Kanit-Black")
    /// Font `Kanit-BoldItalic`.
    static let kanitBoldItalic = Rswift.FontResource(fontName: "Kanit-BoldItalic")
    /// Font `Kanit-Bold`.
    static let kanitBold = Rswift.FontResource(fontName: "Kanit-Bold")
    /// Font `Kanit-ExtraBoldItalic`.
    static let kanitExtraBoldItalic = Rswift.FontResource(fontName: "Kanit-ExtraBoldItalic")
    /// Font `Kanit-ExtraBold`.
    static let kanitExtraBold = Rswift.FontResource(fontName: "Kanit-ExtraBold")
    /// Font `Kanit-ExtraLightItalic`.
    static let kanitExtraLightItalic = Rswift.FontResource(fontName: "Kanit-ExtraLightItalic")
    /// Font `Kanit-ExtraLight`.
    static let kanitExtraLight = Rswift.FontResource(fontName: "Kanit-ExtraLight")
    /// Font `Kanit-Italic`.
    static let kanitItalic = Rswift.FontResource(fontName: "Kanit-Italic")
    /// Font `Kanit-LightItalic`.
    static let kanitLightItalic = Rswift.FontResource(fontName: "Kanit-LightItalic")
    /// Font `Kanit-Light`.
    static let kanitLight = Rswift.FontResource(fontName: "Kanit-Light")
    /// Font `Kanit-MediumItalic`.
    static let kanitMediumItalic = Rswift.FontResource(fontName: "Kanit-MediumItalic")
    /// Font `Kanit-Medium`.
    static let kanitMedium = Rswift.FontResource(fontName: "Kanit-Medium")
    /// Font `Kanit-Regular`.
    static let kanitRegular = Rswift.FontResource(fontName: "Kanit-Regular")
    /// Font `Kanit-SemiBoldItalic`.
    static let kanitSemiBoldItalic = Rswift.FontResource(fontName: "Kanit-SemiBoldItalic")
    /// Font `Kanit-SemiBold`.
    static let kanitSemiBold = Rswift.FontResource(fontName: "Kanit-SemiBold")
    /// Font `Kanit-ThinItalic`.
    static let kanitThinItalic = Rswift.FontResource(fontName: "Kanit-ThinItalic")
    /// Font `Kanit-Thin`.
    static let kanitThin = Rswift.FontResource(fontName: "Kanit-Thin")

    /// `UIFont(name: "Kanit-Black", size: ...)`
    static func kanitBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitBlack, size: size)
    }

    /// `UIFont(name: "Kanit-BlackItalic", size: ...)`
    static func kanitBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitBlackItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Bold", size: ...)`
    static func kanitBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitBold, size: size)
    }

    /// `UIFont(name: "Kanit-BoldItalic", size: ...)`
    static func kanitBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitBoldItalic, size: size)
    }

    /// `UIFont(name: "Kanit-ExtraBold", size: ...)`
    static func kanitExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitExtraBold, size: size)
    }

    /// `UIFont(name: "Kanit-ExtraBoldItalic", size: ...)`
    static func kanitExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Kanit-ExtraLight", size: ...)`
    static func kanitExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitExtraLight, size: size)
    }

    /// `UIFont(name: "Kanit-ExtraLightItalic", size: ...)`
    static func kanitExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Italic", size: ...)`
    static func kanitItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Light", size: ...)`
    static func kanitLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitLight, size: size)
    }

    /// `UIFont(name: "Kanit-LightItalic", size: ...)`
    static func kanitLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitLightItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Medium", size: ...)`
    static func kanitMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitMedium, size: size)
    }

    /// `UIFont(name: "Kanit-MediumItalic", size: ...)`
    static func kanitMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitMediumItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Regular", size: ...)`
    static func kanitRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitRegular, size: size)
    }

    /// `UIFont(name: "Kanit-SemiBold", size: ...)`
    static func kanitSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitSemiBold, size: size)
    }

    /// `UIFont(name: "Kanit-SemiBoldItalic", size: ...)`
    static func kanitSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Kanit-Thin", size: ...)`
    static func kanitThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitThin, size: size)
    }

    /// `UIFont(name: "Kanit-ThinItalic", size: ...)`
    static func kanitThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: kanitThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.kanitBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Black' could not be loaded, is 'Kanit-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-BlackItalic' could not be loaded, is 'Kanit-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Bold' could not be loaded, is 'Kanit-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-BoldItalic' could not be loaded, is 'Kanit-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-ExtraBold' could not be loaded, is 'Kanit-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-ExtraBoldItalic' could not be loaded, is 'Kanit-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-ExtraLight' could not be loaded, is 'Kanit-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-ExtraLightItalic' could not be loaded, is 'Kanit-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Italic' could not be loaded, is 'Kanit-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Light' could not be loaded, is 'Kanit-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-LightItalic' could not be loaded, is 'Kanit-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Medium' could not be loaded, is 'Kanit-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-MediumItalic' could not be loaded, is 'Kanit-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Regular' could not be loaded, is 'Kanit-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-SemiBold' could not be loaded, is 'Kanit-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-SemiBoldItalic' could not be loaded, is 'Kanit-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-Thin' could not be loaded, is 'Kanit-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.kanitThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Kanit-ThinItalic' could not be loaded, is 'Kanit-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 56 images.
  struct image {
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `avatar_10`.
    static let avatar_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_10")
    /// Image `avatar_11`.
    static let avatar_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_11")
    /// Image `avatar_12`.
    static let avatar_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_12")
    /// Image `avatar_13`.
    static let avatar_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_13")
    /// Image `avatar_14`.
    static let avatar_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_14")
    /// Image `avatar_15`.
    static let avatar_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_15")
    /// Image `avatar_16`.
    static let avatar_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_16")
    /// Image `avatar_17`.
    static let avatar_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_17")
    /// Image `avatar_18`.
    static let avatar_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_18")
    /// Image `avatar_19`.
    static let avatar_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_19")
    /// Image `avatar_1`.
    static let avatar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_1")
    /// Image `avatar_20`.
    static let avatar_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_20")
    /// Image `avatar_21`.
    static let avatar_21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_21")
    /// Image `avatar_22`.
    static let avatar_22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_22")
    /// Image `avatar_23`.
    static let avatar_23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_23")
    /// Image `avatar_24`.
    static let avatar_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_24")
    /// Image `avatar_25`.
    static let avatar_25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_25")
    /// Image `avatar_26`.
    static let avatar_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_26")
    /// Image `avatar_27`.
    static let avatar_27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_27")
    /// Image `avatar_28`.
    static let avatar_28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_28")
    /// Image `avatar_29`.
    static let avatar_29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_29")
    /// Image `avatar_2`.
    static let avatar_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_2")
    /// Image `avatar_30`.
    static let avatar_30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_30")
    /// Image `avatar_31`.
    static let avatar_31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_31")
    /// Image `avatar_32`.
    static let avatar_32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_32")
    /// Image `avatar_33`.
    static let avatar_33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_33")
    /// Image `avatar_34`.
    static let avatar_34 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_34")
    /// Image `avatar_35`.
    static let avatar_35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_35")
    /// Image `avatar_36`.
    static let avatar_36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_36")
    /// Image `avatar_37`.
    static let avatar_37 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_37")
    /// Image `avatar_38`.
    static let avatar_38 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_38")
    /// Image `avatar_39`.
    static let avatar_39 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_39")
    /// Image `avatar_3`.
    static let avatar_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_3")
    /// Image `avatar_40`.
    static let avatar_40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_40")
    /// Image `avatar_4`.
    static let avatar_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_4")
    /// Image `avatar_5`.
    static let avatar_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_5")
    /// Image `avatar_6`.
    static let avatar_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_6")
    /// Image `avatar_7`.
    static let avatar_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_7")
    /// Image `avatar_8`.
    static let avatar_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_8")
    /// Image `avatar_9`.
    static let avatar_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_9")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `crossIcon`.
    static let crossIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "crossIcon")
    /// Image `deleteUserIcon`.
    static let deleteUserIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteUserIcon")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `dummythumbnail2`.
    static let dummythumbnail2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummythumbnail2")
    /// Image `dummythumbnail`.
    static let dummythumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummythumbnail")
    /// Image `editIcon`.
    static let editIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "editIcon")
    /// Image `emailIcon`.
    static let emailIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailIcon")
    /// Image `hideIcon`.
    static let hideIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "hideIcon")
    /// Image `passwordIcon`.
    static let passwordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "passwordIcon")
    /// Image `personIcon`.
    static let personIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "personIcon")
    /// Image `playlistIcon`.
    static let playlistIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "playlistIcon")
    /// Image `sendMessage`.
    static let sendMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendMessage")
    /// Image `shareIcon`.
    static let shareIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareIcon")
    /// Image `showIcon`.
    static let showIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "showIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_1", bundle: ..., traitCollection: ...)`
    static func avatar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_10", bundle: ..., traitCollection: ...)`
    static func avatar_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_11", bundle: ..., traitCollection: ...)`
    static func avatar_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_12", bundle: ..., traitCollection: ...)`
    static func avatar_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_13", bundle: ..., traitCollection: ...)`
    static func avatar_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_14", bundle: ..., traitCollection: ...)`
    static func avatar_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_15", bundle: ..., traitCollection: ...)`
    static func avatar_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_16", bundle: ..., traitCollection: ...)`
    static func avatar_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_17", bundle: ..., traitCollection: ...)`
    static func avatar_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_18", bundle: ..., traitCollection: ...)`
    static func avatar_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_19", bundle: ..., traitCollection: ...)`
    static func avatar_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_2", bundle: ..., traitCollection: ...)`
    static func avatar_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_20", bundle: ..., traitCollection: ...)`
    static func avatar_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_21", bundle: ..., traitCollection: ...)`
    static func avatar_21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_22", bundle: ..., traitCollection: ...)`
    static func avatar_22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_23", bundle: ..., traitCollection: ...)`
    static func avatar_23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_24", bundle: ..., traitCollection: ...)`
    static func avatar_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_25", bundle: ..., traitCollection: ...)`
    static func avatar_25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_26", bundle: ..., traitCollection: ...)`
    static func avatar_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_27", bundle: ..., traitCollection: ...)`
    static func avatar_27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_27, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_28", bundle: ..., traitCollection: ...)`
    static func avatar_28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_28, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_29", bundle: ..., traitCollection: ...)`
    static func avatar_29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_29, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_3", bundle: ..., traitCollection: ...)`
    static func avatar_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_30", bundle: ..., traitCollection: ...)`
    static func avatar_30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_31", bundle: ..., traitCollection: ...)`
    static func avatar_31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_31, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_32", bundle: ..., traitCollection: ...)`
    static func avatar_32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_33", bundle: ..., traitCollection: ...)`
    static func avatar_33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_33, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_34", bundle: ..., traitCollection: ...)`
    static func avatar_34(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_34, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_35", bundle: ..., traitCollection: ...)`
    static func avatar_35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_35, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_36", bundle: ..., traitCollection: ...)`
    static func avatar_36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_36, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_37", bundle: ..., traitCollection: ...)`
    static func avatar_37(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_37, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_38", bundle: ..., traitCollection: ...)`
    static func avatar_38(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_38, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_39", bundle: ..., traitCollection: ...)`
    static func avatar_39(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_39, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_4", bundle: ..., traitCollection: ...)`
    static func avatar_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_40", bundle: ..., traitCollection: ...)`
    static func avatar_40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_5", bundle: ..., traitCollection: ...)`
    static func avatar_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_6", bundle: ..., traitCollection: ...)`
    static func avatar_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_7", bundle: ..., traitCollection: ...)`
    static func avatar_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_8", bundle: ..., traitCollection: ...)`
    static func avatar_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_9", bundle: ..., traitCollection: ...)`
    static func avatar_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crossIcon", bundle: ..., traitCollection: ...)`
    static func crossIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deleteUserIcon", bundle: ..., traitCollection: ...)`
    static func deleteUserIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteUserIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummythumbnail", bundle: ..., traitCollection: ...)`
    static func dummythumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummythumbnail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummythumbnail2", bundle: ..., traitCollection: ...)`
    static func dummythumbnail2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummythumbnail2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editIcon", bundle: ..., traitCollection: ...)`
    static func editIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emailIcon", bundle: ..., traitCollection: ...)`
    static func emailIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hideIcon", bundle: ..., traitCollection: ...)`
    static func hideIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hideIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passwordIcon", bundle: ..., traitCollection: ...)`
    static func passwordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personIcon", bundle: ..., traitCollection: ...)`
    static func personIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "playlistIcon", bundle: ..., traitCollection: ...)`
    static func playlistIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playlistIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendMessage", bundle: ..., traitCollection: ...)`
    static func sendMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendMessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareIcon", bundle: ..., traitCollection: ...)`
    static func shareIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "showIcon", bundle: ..., traitCollection: ...)`
    static func showIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
